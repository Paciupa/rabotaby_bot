[project]
name = "rabotaby_bot"
version = "0.0.0"
authors = [
  {name = "Anakin"},
]
requires-python = ">=3.9"
dependencies = [
    "aiogram",
    "aiohttp",
    "beautifulsoup4",
    "psycopg2",
]

[dependency-groups]
dev = [
    "mypy",
    "pytest",
    "pytest-env",
    "pytest-cov",
    "types-psycopg2",
]





[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/rules/
preview = true
unsafe-fixes = true
line-length = 100

[tool.ruff.lint]
select = [
    "ALL"
]
ignore = [
    # incompatible with each other:

    # "D203", https://docs.astral.sh/ruff/rules/one-blank-line-before-class/
    # "D211", https://docs.astral.sh/ruff/rules/blank-line-before-class/
    "D203",
    # "D212", https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
    # "D213", https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/
    "D213",


    # incompatible with ruff format:

    # missing-trailing-comma
    "COM812",


    # don't check at all:

    # missing-copyright-notice; preview
    "CPY001",
    # annotations
    "ANN",
    # docstring-missing-returns; preview
    "DOC201",


    # don't check in this project:

    # print use
    "T201",
    # tab-indentation
    "W191",
    # indent-with-spaces
    "D206",
    # ambiguous-unicode-character-string
    "RUF001",
    # ambiguous-unicode-character-docstring
    "RUF002",
    # ambiguous-unicode-character-comment
    "RUF003",


    # fix later:



    # figure out what to do:

    # # undocumented-public-function [40]
    # "D103",
    # # commented-out-code [29]
    # "ERA001",
    # # line-too-long [25]
    # "E501",
    # # hardcoded-sql-expression [10]
    # "S608",
    # # undocumented-public-method [9]
    # "D102",
    # # unnecessary-assign [6]
    # "RET504",
    # # empty-docstring [5]
    # "D419",
    # # undocumented-public-init [4]
    # "D107",
    # # line-contains-todo [3]
    # "FIX002",
    # # missing-todo-author [3]
    # "TD002",
    # # missing-todo-link [3]
    # "TD003",
    # # missing-todo-colon [3]
    # "TD004",
    # # undocumented-public-module [3]
    # "D100",
    # # boolean-default-value-positional-argument [2]
    # "FBT002",
    # # superfluous-else-return [2]
    # "RET505",
    # # if-expr-with-true-false [2]
    # "SIM210",
    # # global-statement [2]
    # "PLW0603",
    # # mutable-class-default [2]
    # "RUF012",
    # # try-consider-else [2]
    # "TRY300",
    # # blind-except [1]
    # "BLE001",
    # # unnecessary-generator-list [1]
    # "C400",
    # # unnecessary-list-call [1]
    # "C411",
    # # call-datetime-now-without-tzinfo [1]
    # "DTZ005",
    # # call-datetime-strptime-without-zone [1]
    # "DTZ007",
    # # implicit-return [1]
    # "RET503",
    # # missing-todo-description [1]
    # "TD005",
    # # invalid-function-name [1]
    # "N802",
    # # undocumented-public-class [1]
    # "D101",
    # # missing-trailing-period [1]
    # "D400",
    # # missing-terminal-punctuation [1]
    # "D415",
    # # too-many-locals [1]
    # "PLR0914",
    # # asyncio-dangling-task [1]
    # "RUF006",
    # # unused-async [1]
    # "RUF029",


    # stale:
]
external = [
    "WPS",
]

[tool.ruff.lint.per-file-ignores]
# in tests:
# https://github.com/astral-sh/ruff/issues/4368

# assert use, ends-in-period, undocumented-public-module,
# undocumented-public-function, unused-variable, unused-function-argument
"tests/**/*.py" = ["S101", "D100", "D103", "D400", "F841", "ARG001"]
"test_*" = ["S101", "D100", "D103", "D400", "F841", "ARG001"]
"*_test" = ["S101", "D100", "D103", "D400", "F841", "ARG001"]
"*_test_*" = ["S101", "D100", "D103", "D400", "F841", "ARG001"]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
skip-magic-trailing-comma = true
indent-style = "tab"





[tool.pylint.main]
ignore-patterns = [
    "pyproject.toml",
]
# use virtual environment
init-hook = """
try: import pylint_venv
except ImportError: pass
else: pylint_venv.inithook(force_venv_activation=True, quiet=True)
"""
jobs = 0
load-plugins = [
    "pylint_per_file_ignores",
]

[tool.pylint.format]
max-line-length = 100
indent-string = "\t"

[tool.pylint."messages control"]
enable = [
    "bad-inline-option",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
]
disable = [
    # https://pylint.pycqa.org/en/latest/faq.html#which-messages-should-i-disable-to-avoid-duplicates-if-i-use-other-popular-linters

    # duplicates with flake8:pycodestyle:
    # "bad-indentation", is not covered by ruff
    "bare-except",
    "line-too-long",
    "missing-final-newline",
    "multiple-statements",
    "singleton-comparison",
    "trailing-newlines",
    "trailing-whitespace",
    # unnecessary-negation is not covered by flake8
    "unnecessary-negation",
    "unnecessary-semicolon",
    "wrong-import-position",

    # duplicates with flake8:pyflakes:
    "undefined-variable",
    "unused-import",
    "unused-variable",

    # docstrings, duplicates with ruff:D:
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "empty-docstring",
]
# bug with TOML lists: https://github.com/christopherpickering/pylint-per-file-ignores/issues/160
per-file-ignores = """
    test_*:unused-variable,
"""
    # Don't work (astroid-error)
    # "*_test:unused-variable",
    # "*_test_*:unused-variable",

[tool.pylint.reports]
output-format = "colorized"
score = false





[tool.flake8]
exclude = ["*.venv*/"]
ignore = [
    # incompatible with each other:
    # closing bracket is missing indentation
    "E133",
    # line break before binary operator
    "W503",

    # duplicates with ruff:
    "B007",
    "E203",
    "E266",
    "E501",
    "F401",
    "W191",
    "W291",
    "W292",
    "W293",

    # "E302",
    # "E303",
    # "E123",
]
per-file-ignores = [
    # in tests:
    # local variable name is assigned to but never used
    "test_*:F841",
    "*_test:F841",
    "*_test_*:F841",
]
max-line-length = 100
inline-quotes = "double"





[tool.pytest.ini_options]
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true
env = [
    "API_TELEGRAM_KEY=0234567891:AAbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "USER_ID=132457680",
    "DB_HOST=test_localhost",
    "DB_PORT=5439",
    "DB_NAME=test_bot_db",
    "DB_USER=test_postgres",
    "DB_PASSWORD=p7As5s",
]
